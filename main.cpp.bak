#include <iostream>

#define GI_BOOST 1
#define GI_EIGEN 2
#define GI_ARMA 3

#ifndef MATH_ENGINE

#pragma GCC error MATH_ENGINE variable must be defined

#endif

#if MATH_ENGINE == GI_BOOST

#include "boost_inverse.h"

void function()
{
	std::cout << "Using Boost to solve linear algebra problems" << std::endl;
	
	ublas::matrix<double> matInv = ublas::matrix<double>(3,3);
	ublas::matrix<double> mat = ublas::matrix<double>(3,3);
	mat(0,0) = 0.0002;
	mat(0,1) = 0.0002;
	mat(0,2) = 0;
	mat(1,0) = -0.0001;
	mat(1,1) = 0.0004;
	mat(1,2) = 0;
	mat(2,0) = 0;
	mat(2,1) = 0;
	mat(2,2) = 0.1111;
	InvertMatrix(mat, matInv);
	std::cout << matInv;
}
	
#elif MATH_ENGINE == GI_EIGEN

#include "eigen_inverse.h"

void function()
{
	std::cout << "Using Eigen to solve linear algebra problems" << std::endl;
	const int N=3;
	MatrixXd m = MatrixXd::Random(N,N);
	std::cout << m.inverse() << std::endl;
}

#elif MATH_ENGINE == GI_ARMA

#include "arma_inverse.h"

void function()
{
	std::cout << "Using Armadillo to solve linear algebra problems" << std::endl;

	mat A(5,5);
	A << 0.165300 << 0.454037 << 0.995795 << 0.124098 << 0.047084 << endr
    << 0.688782 << 0.036549 << 0.552848 << 0.937664 << 0.866401 << endr
    << 0.348740 << 0.479388 << 0.506228 << 0.145673 << 0.491547 << endr
    << 0.148678 << 0.682258 << 0.571154 << 0.874724 << 0.444632 << endr
    << 0.245726 << 0.595218 << 0.409327 << 0.367827 << 0.385736 << endr;
	
	std::cout << "inv(A): " << std::endl << inv(A) << std::endl;
}

#else
	
void function()
{
	std::cout << "Linear algebra engine not specified";
}
	
#endif

int main(void)
{
	function();
}
